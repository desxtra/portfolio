<section id="projects" class="flex flex-col items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900 py-12">
  <h3 class="text-4xl font-bold mb-8 text-gray-800 dark:text-gray-100">Projects</h3>

  <!-- Outer carousel wrapper: relative + overflow-visible for desktop arrows -->
  <div class="w-full max-w-6xl relative overflow-visible">
    <!-- Viewport: hides overflowing cards, keeps arrows visible outside -->
    <div id="projectViewport" class="overflow-hidden pb-8 px-4">
      <div
        id="projectScrollTrack"
        class="flex gap-3 sm:gap-6 w-full transition-transform duration-500 ease-out"
      >
        <!-- Mobile: 75vw with max 19.5rem; sm: 2 across; lg: 3 across -->
        <div
          class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 p-6 rounded-xl shadow-lg transition hover:shadow-xl flex-shrink-0 min-w-0
                 basis-[75vw] max-w-[19.5rem]
                 sm:basis-[calc((100%-24px)/2)] sm:max-w-none
                 lg:basis-[calc((100%-48px)/3)]"
        >
          <img src="/img/project-hollow.png" class="rounded-lg mb-4 w-full h-48 object-cover" alt="hollow-project" />
          <h4 class="font-bold text-xl mb-2 text-gray-900 dark:text-gray-100">Hollow</h4>
          <p class="text-base text-gray-700 dark:text-gray-300">
            A fantasy 3D perspective game rich in stories.
            <span class="italic text-blue-600 dark:text-blue-400">[Under Development]</span>
          </p>
        </div>

        <div
          class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 p-6 rounded-xl shadow-lg transition hover:shadow-xl flex-shrink-0 min-w-0
                 basis-[75vw] max-w-[19.5rem]
                 sm:basis-[calc((100%-24px)/2)] sm:max-w-none
                 lg:basis-[calc((100%-48px)/3)]"
        >
          <img src="/img/project-hollow.png" class="rounded-lg mb-4 w-full h-48 object-cover" alt="project-2" />
          <h4 class="font-bold text-xl mb-2 text-gray-900 dark:text-gray-100">Portfolio Website</h4>
          <p class="text-base text-gray-700 dark:text-gray-300">
            A modern portfolio website built with Astro and Tailwind CSS. Features dark mode and responsive design.
          </p>
        </div>

        <div
          class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 p-6 rounded-xl shadow-lg transition hover:shadow-xl flex-shrink-0 min-w-0
                 basis-[75vw] max-w-[19.5rem]
                 sm:basis-[calc((100%-24px)/2)] sm:max-w-none
                 lg:basis-[calc((100%-48px)/3)]"
        >
          <img src="/img/project-hollow.png" class="rounded-lg mb-4 w-full h-48 object-cover" alt="project-3" />
          <h4 class="font-bold text-xl mb-2 text-gray-900 dark:text-gray-100">E-Commerce API</h4>
          <p class="text-base text-gray-700 dark:text-gray-300">
            RESTful API for e-commerce platform built with Node.js, Express, and MongoDB. Includes authentication and payment integration.
          </p>
        </div>

        <div
          class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 p-6 rounded-xl shadow-lg transition hover:shadow-xl flex-shrink-0 min-w-0
                 basis-[75vw] max-w-[19.5rem]
                 sm:basis-[calc((100%-24px)/2)] sm:max-w-none
                 lg:basis-[calc((100%-48px)/3)]"
        >
          <img src="/img/project-hollow.png" class="rounded-lg mb-4 w-full h-48 object-cover" alt="project-4" />
          <h4 class="font-bold text-xl mb-2 text-gray-900 dark:text-gray-100">Task Management App</h4>
          <p class="text-base text-gray-700 dark:text-gray-300">
            A productivity app with real-time collaboration features. Built with React, Socket.io, and PostgreSQL.
          </p>
        </div>

        <div
          class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 p-6 rounded-xl shadow-lg transition hover:shadow-xl flex-shrink-0 min-w-0
                 basis-[75vw] max-w-[19.5rem]
                 sm:basis-[calc((100%-24px)/2)] sm:max-w-none
                 lg:basis-[calc((100%-48px)/3)]"
        >
          <img src="/img/project-hollow.png" class="rounded-lg mb-4 w-full h-48 object-cover" alt="project-5" />
          <h4 class="font-bold text-xl mb-2 text-gray-900 dark:text-gray-100">Weather Dashboard</h4>
          <p class="text-base text-gray-700 dark:text-gray-300">
            Beautiful weather dashboard with interactive charts and forecasts. Uses OpenWeather API and Chart.js.
          </p>
        </div>
      </div>
    </div>

    <!-- Controls: square below on mobile; circular centered outside viewport on md+ -->
    <div class="mt-4 flex items-center justify-between px-2 md:px-0 md:mt-0 md:h-0">
      <!-- Left -->
      <button
        id="projectScrollLeft"
        class="z-30 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 shadow-lg transition-all
               w-10 h-10 rounded-md flex items-center justify-center
               md:w-auto md:h-auto md:rounded-full md:p-3
               md:absolute md:left-[-2rem] lg:left-[-2.5rem] md:top-1/2 md:-translate-y-1/2
               opacity-0 pointer-events-none"
        aria-label="Scroll projects left"
      >
        <svg class="w-4 h-4 md:w-5 md:h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <!-- Right -->
      <button
        id="projectScrollRight"
        class="z-30 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 shadow-lg transition-all
               w-10 h-10 rounded-md flex items-center justify-center
               md:w-auto md:h-auto md:rounded-full md:p-3
               md:absolute md:right-[-2rem] lg:right-[-2.5rem] md:top-1/2 md:-translate-y-1/2"
        aria-label="Scroll projects right"
      >
        <svg class="w-4 h-4 md:w-5 md:h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const scrollTrack = document.getElementById("projectScrollTrack");
    const scrollLeft = document.getElementById("projectScrollLeft");
    const scrollRight = document.getElementById("projectScrollRight");

    let currentIndex = 0;
    const totalItems = scrollTrack.children.length;

    function getVisibleItems() {
      if (window.matchMedia("(min-width: 1024px)").matches) return 3;
      if (window.matchMedia("(min-width: 640px)").matches) return 2;
      return 1;
    }

    function getItemWidth() {
      const first = scrollTrack.children[0];
      return first ? first.getBoundingClientRect().width : 0;
    }

    function getGap() {
      const styles = getComputedStyle(scrollTrack);
      // mobile: gap-3 = 12px; sm+: gap-6 = 24px
      return parseFloat(styles.columnGap || styles.gap || "12") || 12;
    }

    function getMaxIndex() {
      const visible = getVisibleItems();
      return Math.max(0, totalItems - visible);
    }

    function updateArrows() {
      const maxIndex = getMaxIndex();
      scrollLeft.style.opacity = currentIndex <= 0 ? "0" : "1";
      scrollLeft.style.pointerEvents = currentIndex <= 0 ? "none" : "auto";
      scrollRight.style.opacity = currentIndex >= maxIndex ? "0" : "1";
      scrollRight.style.pointerEvents = currentIndex >= maxIndex ? "none" : "auto";
    }

    function updateScrollPosition() {
      const itemWidth = getItemWidth();
      const gap = getGap();
      const translateX = -(currentIndex * (itemWidth + gap));
      scrollTrack.style.transform = `translateX(${translateX}px)`;
      updateArrows();
    }

    scrollLeft.addEventListener("click", () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateScrollPosition();
      }
    });

    scrollRight.addEventListener("click", () => {
      const maxIndex = getMaxIndex();
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateScrollPosition();
      }
    });

    window.addEventListener("resize", () => {
      const maxIndex = getMaxIndex();
      if (currentIndex > maxIndex) currentIndex = maxIndex;
      updateScrollPosition();
    });

    updateScrollPosition();
  });
</script>